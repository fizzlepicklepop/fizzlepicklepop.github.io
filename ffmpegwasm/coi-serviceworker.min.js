/*! coi-serviceworker v0.1.7 - https://github.com/gzuidhof/coi-serviceworker */
if (typeof window === 'undefined') {
  self.addEventListener("install", () => self.skipWaiting());
  self.addEventListener("activate", (event) => event.waitUntil(self.clients.claim()));
  self.addEventListener("message", (ev) => {
    if (ev.data && ev.data.type === "deregister") self.registration.unregister().then(() => self.clients.matchAll()).then(clients => { clients.forEach((client) => client.navigate(client.url)); });
  });
  self.addEventListener("fetch", function(event) {
    const r = event.request;
    if (r.cache === "only-if-cached" && r.mode !== "same-origin") return;
    event.respondWith(
      fetch(r)
        .then((res) => {
          if (res.status === 0) return res;
          const newHeaders = new Headers(res.headers);
          newHeaders.set("Cross-Origin-Embedder-Policy", "require-corp");
          newHeaders.set("Cross-Origin-Opener-Policy", "same-origin");
          return new Response(res.body, { status: res.status, statusText: res.statusText, headers: newHeaders });
        })
        .catch((e) => console.error(e))
    );
  });
} else {
  (function() {
    if (!window.isSecureContext) return;
    if (window.crossOriginIsolated !== false) return;
    const register = () => navigator.serviceWorker.register('/coi-serviceworker.min.js');
    if (document.readyState === "complete") register();
    else window.addEventListener("load", register);
  })();
}
